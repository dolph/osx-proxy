# !/bin/sh
# SSH SOCKS proxy script for Mac OS X

# Set PROXY_USER and PROXY_HOST somewhere in sourced path i.e. enter following
# info into .bashrc or .zshrc or a more private auth file
#
#   $ export PROXY_USER='user'
#   $ export PROXY_HOST='example.com'
#
# If choosing not to set credentials as Environmental Variables, replace the
# values below for $PROXY_USER and $PROXY_HOST with genuine credentials. For
# example:
#
#   $ remoteuser='user'
#   $ remoteproxy='example.com'

remote=${2:-$PROXY_USER@$PROXY_HOST}
remoteport="22"
interface="Display Ethernet"

# Get the min and max system-available ports.
lowerport=`sysctl net.inet.ip.portrange.first | cut -d " " -f 2`
upperport=`sysctl net.inet.ip.portrange.last | cut -d " " -f 2`

localport=`jot -r 1 $lowerport $upperport`

usage(){
    echo ""
    echo "Usage: proxy [on|off|killall|shutdown|no_args]"
    echo "Proxy is a proxy settings toggle script for OSX"
    echo "Proxy initiates an SSH tunnel and then enables a Socks proxy"
}

unknown_input(){
    echo "Unknown input, try again with different term"
}

get_proxy_state(){
    result=`networksetup -getsocksfirewallproxy "$interface" -Fi | head -1 | cut -d ' ' -f2`
    echo $result
}

proxy_on(){
    echo "Listening on localhost:$localport. Modifying network settings.."
    sudo networksetup -setsocksfirewallproxy "$interface" 127.0.0.1 $localport off
    echo "Starting SSH session."
    ssh -N -C -f -p $remoteport -D $localport $remote
}

proxy_off(){
    echo "Disabling proxy in network settings."
    sudo networksetup -setsocksfirewallproxystate "$interface" off
    echo "Done!"
}

kill_all(){
    pids=`ps -A | grep "ssh -f" | grep "sleep" | awk '{print $1}'`
    echo "Killing all running proxy connections."
    for pid in $pids
        do
    `kill -9 $pid`
    done
}

shutdown(){
    proxy_off
    kill_all
    echo "Proxy shutdown complete!"
}

toggle_state(){
    # result=`get_proxy_state`
    echo $(get_proxy_state) | grep -i 'y' >> /dev/null
    if [[ $? =~ 0 ]]; then
        shutdown
        echo "OFF"
    else
        proxy_on
        echo "ON"
    fi
}

case $1 in
    "on")
        proxy_on
    ;;
    "off")
        proxy_off
    ;;
    "status")
        get_proxy_state
    ;;
    "killall")
        kill_all
    ;;
    "shutdown")
        shutdown
    ;;
    "usage")
        usage
    ;;
    "")
        toggle_state
    ;;
    *)
        unknown_input
        usage
    ;;
esac
